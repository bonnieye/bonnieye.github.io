<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Magic_Dog&#39;s Home</title>
  
  <subtitle>魔力狗的窝</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-11T09:19:01.865Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>bonnieyqh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetNote</title>
    <link href="http://example.com/2022/02/11/LeetNote/"/>
    <id>http://example.com/2022/02/11/LeetNote/</id>
    <published>2022-02-11T09:16:38.000Z</published>
    <updated>2022-02-11T09:19:01.865Z</updated>
    
    <content type="html"><![CDATA[<h3 id="833-字符串中的查找与替换"><a href="#833-字符串中的查找与替换" class="headerlink" title="833. 字符串中的查找与替换"></a><a href="https://leetcode-cn.com/problems/find-and-replace-in-string/">833. 字符串中的查找与替换</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">findReplaceString</span><span class="params">(string s, vector&lt;<span class="type">int</span>&gt;&amp; indices, vector&lt;string&gt;&amp; sources, vector&lt;string&gt;&amp; targets)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = indices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//需要用map 对可能无序的indices进行一波排序</span></span><br><span class="line">        map&lt;<span class="type">int</span>,pair&lt;string,string&gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++) m[indices[i]] = <span class="built_in">pair</span>(sources[i],targets[i]);</span><br><span class="line">        <span class="comment">//注意这里的trick可以从右边开始替换左边的</span></span><br><span class="line">        <span class="comment">//而且注意没有from m.end() iter-- to m.brgin()的写法！</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> iter = m.<span class="built_in">rbegin</span>();iter != m.<span class="built_in">rend</span>();iter++)&#123;</span><br><span class="line">            <span class="type">int</span> pos = iter-&gt;first;</span><br><span class="line">            string s1 = iter-&gt;second.first;</span><br><span class="line">            string s2 = iter-&gt;second.second;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">substr</span>(pos,s1.<span class="built_in">size</span>()) == s1) s = s.<span class="built_in">substr</span>(<span class="number">0</span>,pos) + s2 +s.<span class="built_in">substr</span>(pos+s1.<span class="built_in">size</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">findReplaceString</span><span class="params">(string s, vector&lt;<span class="type">int</span>&gt;&amp; indices, vector&lt;string&gt;&amp; sources, vector&lt;string&gt;&amp; targets)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = indices.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            m[indices[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(indices.<span class="built_in">begin</span>(),indices.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">//需要用map 对可能无序的indices进行一波排序</span></span><br><span class="line">        <span class="type">int</span> offset = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> sIdx:indices)&#123;</span><br><span class="line">            <span class="type">int</span> new_pos = sIdx+offset;</span><br><span class="line">            string a = sources[m[sIdx]];</span><br><span class="line">            string b = targets[m[sIdx]];</span><br><span class="line">            <span class="type">int</span> asz = a.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">substr</span>(new_pos,asz) == a) &#123;</span><br><span class="line">                s = s.<span class="built_in">substr</span>(<span class="number">0</span>,new_pos) + b +s.<span class="built_in">substr</span>(new_pos + asz);</span><br><span class="line">                offset += b.<span class="built_in">size</span>() - asz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1423-可获得的最大点数"><a href="#1423-可获得的最大点数" class="headerlink" title="1423. 可获得的最大点数"></a><a href="https://leetcode-cn.com/problems/maximum-points-you-can-obtain-from-cards/">1423. 可获得的最大点数</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cardPoints, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = cardPoints.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//求n-k大小的滑动窗口中sum最小的值</span></span><br><span class="line">        <span class="type">int</span> Winsz = n-k;</span><br><span class="line">        <span class="type">int</span> minSum = <span class="built_in">accumulate</span>(cardPoints.<span class="built_in">begin</span>(),cardPoints.<span class="built_in">begin</span>()+Winsz,<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> minALL = minSum;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = Winsz;i &lt; n;i++)&#123;</span><br><span class="line">            minSum += (cardPoints[i] - cardPoints[i-Winsz]);</span><br><span class="line">            minALL  = <span class="built_in">min</span>(minSum,minALL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">accumulate</span>(cardPoints.<span class="built_in">begin</span>(),cardPoints.<span class="built_in">end</span>(),<span class="number">0</span>) - minALL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="410-分割数组的最大值"><a href="#410-分割数组的最大值" class="headerlink" title="410. 分割数组的最大值"></a><a href="https://leetcode-cn.com/problems/split-array-largest-sum/">410. 分割数组的最大值</a></h3><p>遇到最大化最小值或最小化最大值，就是二分查找</p><p>1.动态规划</p><p><img src="C:\Users\yeqiuhan\AppData\Roaming\Typora\typora-user-images\image-20220210170547790.png" alt="image-20220210170547790"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">splitArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//dp[i][j]数组中存的是前i个数分成j段能得到的最大连续子数组和的最小值</span></span><br><span class="line">        <span class="comment">//对k进行枚举，前k个数被分为j-1段，而第k+1到第i个数为第j段</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(m + <span class="number">1</span>, LLONG_MAX));</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">sub</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            sub[i + <span class="number">1</span>] = sub[i] +nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;= n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">min</span>(i,m);j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt; i;k++)</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j],<span class="built_in">max</span>(dp[k][j<span class="number">-1</span>],sub[i]-sub[k]));</span><br><span class="line">        <span class="keyword">return</span> dp[n][m];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n^2×m)，其中 n 是数组的长度，m 是分成的非空的连续子数组的个数。总状态数为O(n×m)，状态转移时间复杂度O(n)【这是因为最内层枚举k循环了O（N）次】，所以总时间复杂度为O(n^2 ×m)。</p><p>空间复杂度：O(n×m)，为动态规划数组的开销。</p><p>2.二分法</p><p>由于题目的返回要求：返回最小和的值，最小和mid必然落在 [max(nums), sum(nums)] 之间，我们可以使用二分来进行查找。猜mid值并使用贪心算法确定此值的正确性，直到猜到正确最小和的值。</p><p>我先猜一个mid值，然后遍历数组划分，使<strong>每个子数组和都最接近mid</strong>（贪心地逼近mid），这样我得到的<strong>子数组数一定最少</strong>;（因为要数组各自和的<strong>最大值最小</strong>，即数组数要尽可能小地划分，因此这里算最少的子数组）<br>如果即使这样子数组数量仍旧多于m个，那么明显说明我mid猜小了，因此 l = mid + 1;<br>而如果得到的子数组数量小于等于m个，那么我可能会想，mid是不是有可能更小？值得一试。因此 h = mid;</p><p><img src="C:\Users\yeqiuhan\AppData\Roaming\Typora\typora-user-images\image-20220210173444904.png" alt="image-20220210173444904"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">splitArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> l = nums[<span class="number">0</span>], h = <span class="number">0</span>;<span class="comment">//int类型在这里不合适，因为h可能会超过int类型能表示的最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : nums)</span><br><span class="line">        &#123;</span><br><span class="line">            h += i;</span><br><span class="line">            l = l &gt; i ? l : i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;h)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> mid = (l + h) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">long</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">1</span>;<span class="comment">//初始值必须为1</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> i:nums)</span><br><span class="line">            &#123;</span><br><span class="line">                temp += i;</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;mid)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = i;</span><br><span class="line">                    ++cnt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt&gt;m)</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                h = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;833-字符串中的查找与替换&quot;&gt;&lt;a href=&quot;#833-字符串中的查找与替换&quot; class=&quot;headerlink&quot; title=&quot;833. 字符串中的查找与替换&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/f</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/02/11/hello-world/"/>
    <id>http://example.com/2022/02/11/hello-world/</id>
    <published>2022-02-11T08:12:59.117Z</published>
    <updated>2022-02-11T08:02:35.283Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
